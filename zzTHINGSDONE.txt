
installing backend pip install django-cleanup
- to remove pictures after deleting projects
added INSTALLED_APPS = (
    ...,
    'django_cleanup.apps.CleanupConfig',
)in settings.publicly


pip install python-dotenv both backend
pip install groq 

https://console.groq.com/docs/quickstart
follow instructions for installation and checking

npm install react-hook-form  

pip install python-magic
for checkign file type

in shell 
pip install psycopg
pip install psycopg2-binary
pip freeze>requirements.txt <- update requirements.txt with all packages


COMMAND TO CHECK IF EC2 IS UP:
1. Get into AMZN Linux
ssh -i .github_actions_key ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com
ssh -i authDJ.pem ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com

scp -i .github_actions_key domain.cert.pem ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com:/etc/ssl/certs/
scp -i .github_actions_key intermediate.cert.pem ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com:/etc/ssl/certs/
scp -i .github_actions_key private.key.pem ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com:/etc/ssl/private/
scp -i .github_actions_key public.key.pem ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com:/etc/ssl/certs/

 check gunicorn
sudo systemctl status gunicorn

command to check SQL in linx
psql -h react-django-db.cfuk2sy6kztc.us-east-2.rds.amazonaws.com -U superuser -d reactdjango_db



pip install python-decouple
from decouple import config <- added to settings.py


to makae migrations in ec2 
get into linux, 

source venv/bin/activate 
once ur in backend 
to get into venv 

then migrate


check for all databases
psql -h react-django-db.cfuk2sy6kztc.us-east-2.rds.amazonaws.com -U react-django-db

test:
curl http://ec2-18-188-241-109.us-east-2.compute.amazonaws.com/api/projects
ec2-13-58-75-114.us-east-2.compute.amazonaws.com

sudo nano /etc/nginx/sites-available/backend
sudo nano /etc/nginx/sites-enabled/default
sudo systemctl restart nginx
sudo systemctl status nginx

sudo nano /etc/nginx/nginx.conf

sudo nano /etc/systemd/system/gunicorn.service
sudo systemctl daemon-reload
sudo systemctl start gunicorn
sudo systemctl restart gunicorn

sudo systemctl status gunicorn

sudo journalctl -u gunicorn -n 50
sudo tail -f /var/log/nginx/error.log



https://stackoverflow.com/questions/66594111/why-does-nginx-think-my-root-directory-is-usr-share-nginx-and-not-var-www-html

server {
    listen 80 default_server;
    server_name ec2-18-188-241-109.us-east-2.compute.amazonaws.com;

    location = /favicon.ico { access_log off; log_not_found off; }

    location /static {
        root /home/ec2-user/React-Django/backend/static;
    }

    location /api {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://unix:/home/run/gunicorn.sock;
    }
}p







ostgres=# CREATE DATABASE djangoapi_db;
CREATE USER djangoapi_user WITH PASSWORD '0980989';

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'djangoapi_db',
        'USER': 'djangoapi_user',
        'PASSWORD': '0980989',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

DB_NAME=djangoapi_db
DB_USER=djangoapi_user
DB_PASSWORD=0980989
DB_HOST=localhost
DB_PORT=5432


sudo -i -u postgres
psql
\q
exit

switch to postgres user, enter shell, exit shell, exit postgres user 

postgres=# ALTER SCHEMA public OWNER TO djangoapi_user;

psql -h localhost -U djangoapi_user -d djangoapi_db
connect to db as user


ssh -i ".authDJ.pem" ubuntu@ec2-52-15-203-120.us-east-2.compute.amazonaws.com







somethings happening when i git pull i think
its causing installations to disappear
have to run pip install -r 
python3 -m venv venv

For deploying the Django backend, I used an AWS EC2 instance with Ubuntu. After setting up the instance, I installed necessary packages like Python, Git, and Nginx. I cloned my project repository, set up a virtual environment, installed dependencies, and configured Gunicorn as the application server. Nginx was used as a reverse proxy to handle incoming requests. Static files were collected and served by Nginx
<!-- , and the entire setup was secured with an SSL certificate using Certbot. -->

For the Next.js frontend, I built the project locally and deployed it to an AWS S3 bucket configured for static website hosting. The build files were synced to the S3 bucket using the AWS CLI, ensuring efficient and scalable static file delivery. The S3 bucket was configured with a policy to allow public read access, making the site accessible to users. This setup leverages the scalability and reliability of AWS services to ensure a seamless and performant user experience.


pip install djangorestframework-simplejwt
